# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/classes.h":
  namespace `::clif_testing::classes`:
    class `K` as Klass:
      def __init__(self, i: int)
      const C: int
      @classmethod
      def `getCplus2` as C2(cls) -> int
      def `i1` as Int1(self) -> int
      i: int = property(`get`, `set`)
      i2: int = property(`get2`)

    def `PassK` as PassKlass(k_inst: Klass) -> int

    class Derived(Klass):
      """This class also has a "docstring".

      It spans multiple lines.  Plus trailing whitespace.

      None of that should be a problem for the code generator that shoves
      this text into the tp_doc char* slot C string in the generated code.

      """
      j: int
      @add__init__
      def Init(self, i: int, j: int)
      def `has` as __contains__(self, k: int) -> bool

    class NoDefaultConstructor:
      # Currently this __init__ is silently ignored if the default constructor
      # is not accessible.
      # TODO: Look into changing the behavior, to fail at build time.
      def __init__(self)
      def A(self) -> int

    class AddInit:
      i: int
      @add__init__
      def Init(self, other: AddInit)

    class OverloadedGetterProperty:
      def __init__(self, i: int)
      x: int = property(`i`)

    class BytesAttributes:
      def __init__(self, v: str)
      str_as_bytes: bytes
      str_as_str: str
      str_readonly: bytes = property(`get_str_readonly`)
      str_readwrite: bytes = property(`get_str_readwrite`, `set_str_readwrite`)

    enum SomeEnum

    class ClassTakesEnum:
      def __init__(self, e: SomeEnum = default)

    class AddInitNoParams:
      @add__init__
      def Init(self)
      def get_value(self) -> int

    class NestedAttributes:
      def __init__(self)
      pair_attr_str_str: tuple<str, str>
      pair_attr_str_bytes: tuple<str, bytes>
      pair_attr_bytes_str: tuple<bytes, str>
      pair_attr_bytes_bytes: tuple<bytes, bytes>
      pair_property_str_str: tuple<str, str> = property(`get_pair_property_str_str`, `set_pair_property_str_str`)
      pair_property_str_bytes: tuple<str, bytes> = property(`get_pair_property_str_bytes`, `set_pair_property_str_bytes`)
      pair_property_bytes_str: tuple<bytes, str> = property(`get_pair_property_bytes_str`, `set_pair_property_bytes_str`)
      pair_property_bytes_bytes: tuple<bytes, bytes> = property(`get_pair_property_bytes_bytes`, `set_pair_property_bytes_bytes`)
      @getter
      def `pair_unproperty_str_str` as get_pair_unproperty_str_str(self) -> tuple<str, str>
      @setter
      def `pair_unproperty_str_str` as set_pair_unproperty_str_str(self, p: tuple<str, str>)
      @getter
      def `pair_unproperty_str_bytes` as get_pair_unproperty_str_bytes(self) -> tuple<str, bytes>
      @setter
      def `pair_unproperty_str_bytes` as set_pair_unproperty_str_bytes(self, p: tuple<str, bytes>)
      @getter
      def `pair_unproperty_bytes_str` as get_pair_unproperty_bytes_str(self) -> tuple<bytes, str>
      @setter
      def `pair_unproperty_bytes_str` as set_pair_unproperty_bytes_str(self, p: tuple<bytes, str>)
      @getter
      def `pair_unproperty_bytes_bytes` as get_pair_unproperty_bytes_bytes(self) -> tuple<bytes, bytes>
      @setter
      def `pair_unproperty_bytes_bytes` as set_pair_unproperty_bytes_bytes(self, p: tuple<bytes, bytes>)

  namespace `::clif_testing::classes::clif_testing`:
    class WithAmbiguousNamespace:
      def get_value(self) -> int
