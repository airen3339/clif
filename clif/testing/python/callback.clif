# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/python/copy_move_types_library_clif.h" import *

from "clif/testing/callback.h":
  def `FunctionNewStyleCallbackConstRef` as NewStyleCallbackConstRef(
      input:list<int>,
      callback: (in:list<int>) -> tuple<int, list<int>>) -> list<int>

  def `FunctionNewStyleCallbackNonConstRef` as NewStyleCallbackNonConstRef(
      input:list<int>,
      callback: (in:list<int>) -> tuple<int, list<int>>) -> list<int>

  def FunctionWithCallableReturn(callback: (input:int) -> int) ->
      (return_value: (input:int) -> int)

  def `StringCallback` as StringCallbackStr(callback: (in:str) -> None)
  def `StringCallback` as StringCallbackBytes(callback: (in:bytes) -> None)

  class SelfCallback:
    def __init__(self, cb: (s:SelfCallback)->None)

  # Testing pybind11 code generator generating lambda expressions with callbacks
  def LambdaCallback(cb: () -> str) -> bytes

  def PyObjectCallback(cb: () -> object) -> object

  def CallCallbackPassIntReturnInt(cb: (val: int) -> int, val: int) -> int

  def CallCallbackPassConstPtrCopyMoveType(cb: (obj: CopyMoveType) -> str) -> str
  def CallCallbackPassConstPtrCopyOnlyType(cb: (obj: CopyOnlyType) -> str) -> str
  # TODO: Uncomment additional tests.
  # These fail to build with PyCLIF-C-API, but only fail at runtime with PyCLIF-pybind11.
  # def CallCallbackPassConstPtrMoveOnlyType(cb: (obj: MoveOnlyType) -> str) -> str
  # def CallCallbackPassConstPtrStayPutType(cb: (obj: StayPutType) -> str) -> str
