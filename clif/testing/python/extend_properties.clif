# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/python/extend_properties_clif_aux.h":
  namespace `clif_testing`:
    class `ValueHolder` as ValueHolderPlain:
      def __init__(self, v: int)

      @extend
      value_times_23: int = property(`get_value_times_2`, `set_value_times_3`)

    @final
    class ValueHolderFinal:
      def __init__(self, v: int)

      @extend
      value_times_45: int = property(`get_value_times_4`, `set_value_times_5`)

    class ValueHolderImplicitGetPlain:
      def __init__(self, v: int)

      @extend
      value: int = property(`value`, `set_value`)

    @final
    class ValueHolderImplicitGetFinal:
      def __init__(self, v: int)

      @extend
      value: int = property(`value`, `set_value`)

    class PropertyHolder:
      def __init__(self, v: int)

      # Simple getter
      @extend
      value: int = property(`get_value`)

      # Property with customized getter return value
      @extend
      value_times_ten: int = property(`get_value_times_ten`)

      # Property with both getter and setter
      @extend
      value_gs: int = property(`get_value_gs`, `set_value_gs`)

      @extend
      value_bytes: bytes = property(`get_value_bytes`, `set_value_bytes`)

      @extend
      value_ptr_self: int = property(`get_value_ptr_self`)

    class NestedPropertyHolder:
      class Inner:
        def __init__(self, v: int)

        # Simple getter
        @extend
        value: int = property(`get_value`)

        # Property with both getter and setter
        @extend
        value_gs: int = property(`get_value_gs`, `set_value_gs`)

    class UncopyableHolder:
      def __init__(self, v: int)

      @extend
      value: int = property(`get_value`, `set_value`)
